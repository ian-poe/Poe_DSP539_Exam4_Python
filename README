This Exam used Python 3.6.8, pytest-5.4.1

This folder contains eight items including test data sets, function "predict_genomes", a testing function to check the accuracy of the function, the output files for reads.fa for both k-mer length of 2 and 3, and finally a document containing a result overview.
  
The following will go through each of these seven items to make the understanding and running the exam easier.

Objective of Exam4: Write a python script that, when run using the command line, gets information about each k-mer and its subsequent k-mers in a file of sequence fragments.

predict_genome.py: 
    To run this program in command line type the following: "predict_genome.py path_to_data k output_file_name"
    This code uses three inputs from the command line the first is the path where your data being evaluated is stored, the        second is the k-mer length, and the third is the output file name. This code uses multiple simple functions in order to 
    obtain the final results. Once the data is done running, a output confirmation will be printed on the screen reminding 
    you where you saved the results to. There are seven function and a main function which controls all of them once the 
    variables are specified in the command window. To see a detailed description of what each of these functions, please go 
    into the file "predict_genome.py" and read the comments and docstrings for each of the functions. A data file is 
    outputted with each unique k-mer and its frequency along with the next k-mers which follows it and there frequency. The 
    data structure can be seen described in "Exam4_Results_Overview.md" and look like "AA : 985162: {'AA': 245686, 'AC': 
    245841, 'AT': 245873, 'AG': 247762}" when k = 2.

exam4_test.py:
  To run the test code to check the outputs obtained from "predicted_genome.py" the pytest library is used. By obtaining the 
  correct results for a variety of string and values for k, we are able to check the function for edge values and check to 
  ensures that the count is accurate and the functions are performing how they are expected to. These test are used to check 
  the functions and can be seen with an indepth description in the code. In the command line this is run using the command 
  "pytest exam4_test.py". Six different test are performed with multiple comparisons in each test and all of the test pass 
  showing the function does what is expected. In addition two test datasets are included in this folder used to test the 
  function to import the data of interest to ensures that no spaces are line breaks are included in the string. 
  "exam4_example1.txt" is a single line of data to ensures a single line is read correctly then "exam4_textdata2" contains 
  data on multiple line to test that a single string with no spaces are obtained.  

exam4_example1.txt:
  Example data created to check that one line of data is read correctly by the function

exam4_textdata2:
  Example data created to check that multiple line of data is read correctly in the program

exam4_textdata3:
  Example data created to check that the addition of a space in the line of data

Exam4_reads_k2_output.txt:
  This file contains the results of the reads.fa file from class using a k-mer length of 2. It shows 16 rows of data each 
  having its own unique k-mer. This value is followed by the total frequency and then by the next k-mer and there respective 
  frequencies. Each dataline looks like this: (AA : 985162: {'AA': 245686, 'AC': 245841, 'AT': 245873, 'AG': 247762}).

Exam4_reads_k3_output.txt:
  This file contains the results of the reads.fa file from class using a k-mer length of 3. It shows 64 rows of data each 
  having its own unique k-mer. This value is followed by the total frequency and then by the next k-mer and there respective 
  frequencies. Each dataline looks like this: (CTT : 246334: {'TTC': 61664, 'TTA': 61520, 'TTG': 61430, 'TTT': 61720}).

Exam4_Results_Overview:
  This document briefly talks about the structure of the outputted data, how the program addresses edge cases at the 
  beginning and the end of the list, and how the program ensures that the data is not overcounting or being affected by 
  missing data formatting of the original data.

**For a more indepth explanation of the code please read the comments and the docstring in the code itself**
**For a detailed explanation of output data structure and testing edge cases and counting of the program read the Result Overview**
